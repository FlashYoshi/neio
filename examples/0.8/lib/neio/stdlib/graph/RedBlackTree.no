namespace neio.stdlib.graph;

import java.util.List;

import neio.lang.Content;

class RedBlackTree extends Content;

RedBlackNode last;

RedBlackTree() {
    last = null;
}

RedBlackTree(RedBlackNode root) {
    this.last = root.cloneSelf();
}

RedBlackNode root() {
    RedBlackNode current = last;
    while (! current.isRoot()) {
        current = current.parent();
    }

    return current;
}

RedBlackTree insert(List<Integer> items) {
    RedBlackTree current = this;
    for (int i = 0;  i < items.size(); i = i + 1) {
        current = current.insert(items.get(i));
    }

    return current;
}

RedBlackTree insert(Integer value) {
    if (last == null) {
        last = new RedBlackNode(RedBlackNode.BLACK, value);
        return this;
    }
    RedBlackTree newTree = new RedBlackTree(root());
    newTree.insert(value, newTree.root());

    return newTree;
}

void insert(Integer value, RedBlackNode current) {
    if (value.equals(current.value())) {
        return;
    }

    RedBlackNode newNode = new RedBlackNode(RedBlackNode.RED, value);
    if (value < current.value()) {
        if (current.hasLeft()) {
            current = current.left();
            insert(value, current);
        } else {
            current.setLeft(newNode);
        }
    } else {
        if (current.hasRight()) {
            current = current.right();
            insert(value, current);
        } else {
            current.setRight(newNode);
        }
    }

    fixTree(newNode);
}

void fixTree(RedBlackNode node) {
    // fixRedParentUncle can mess this up
    if (node.isRoot()) {
        node.setColor(RedBlackNode.BLACK);
        return;
    } else if (node.parent().isRed()) {
        fixRedParentUncle(node);
    }
}

void fixRedParentUncle(RedBlackNode node) {
    RedBlackNode u = node.uncle();

    if ((u != null) && (u.isRed())) {
        node.parent().setColor(RedBlackNode.BLACK);
        u.setColor(RedBlackNode.BLACK);
        // Exists as uncle exists
        RedBlackNode gp = node.grandparent();
        gp.setColor(RedBlackNode.RED);
        fixTree(gp);
    } else {
        fixRPBUR(node);
    }
}

// Red parent Black Uncle, node is right child
void fixRPBUR(RedBlackNode node) {
    RedBlackNode gp = node.grandparent();
    RedBlackNode p = node.parent();
    if ((node == p.right()) && (p == gp.left())) {
        rotateLeft(p);
        node = node.left();
    } else if ((node == p.left()) && (p == gp.right())) {
        rotateRight(p);
        node = node.right();
    }

    fixRPBUL(node);
}

// Red parent Black Uncle, node is right child
void fixRPBUL(RedBlackNode node) {
    RedBlackNode gp = node.grandparent();
    node.parent().setColor(RedBlackNode.BLACK);
    gp.setColor(RedBlackNode.RED);
    if (node == node.parent().left()) {
        rotateRight(gp);
    } else {
        rotateLeft(gp);
    }
}

void rotateLeft(RedBlackNode node) {
    RedBlackNode p = node.parent();
    RedBlackNode r = node.right();
    RedBlackNode l = r.left();

    if (p != null) {
        if (p.right() == node) {
            p.setRight(r);
        } else {
            p.setLeft(r);
        }
    } else {
        r.setParent(null);
    }
    r.setLeft(node);

    node.setRight(l);
}

void rotateRight(RedBlackNode node) {
    RedBlackNode p = node.parent();
    RedBlackNode l = node.left();
    RedBlackNode r = l.right();

    if (p != null) {
        if (p.right() == node) {
            p.setRight(l);
        } else {
            p.setLeft(l);
        }
    } else {
        l.setParent(null);
    }
    l.setRight(node);

    node.setLeft(r);
}

String toTex() {
    if (last == null) {
        return "";
    }

    StringBuilder result = new StringBuilder("\n\\begin{tikzpicture}[->,>=stealth',level/.style={sibling distance = 5cm/#1,");
    result.append("level distance = 1.5cm}]\n");
    result.append(root().toTex());
    result.append("\\end{tikzpicture}");

    return result.toString();
}
