namespace neio.io;

import neio.lang.*;
import neio.stdlib.*;

/**
 * @author Titouan Vervack
 */
class TexTranslator;

String translate(Object o) {
    Class c = o.getClass();
    String result = "";
    
    if (c.isInstance(Chapter.class)) {
        result = chapter((Chapter) o);
    } else if (c.isInstance(Document.class)) {
        result = document((Document) o);
    } else if (c.isInstance(Enumerate.class)) {
        result = enumerate((Enumerate) o);
    } else if (c.isInstance(EnumerateItem.class)) {
        result = enumerateitem((EnumerateItem) o);
    } else if (c.isInstance(Image.class)) {
        result = image((Image) o);
    } else if (c.isInstance(Itemize.class)) {
        result = itemize((Itemize) o);
    } else if (c.isInstance(ItemizeItem.class)) {
        result = itemizeitem((ItemizeItem) o);
    } else if (c.isInstance(Paragraph.class)) {
        result = paragraph((Paragraph) o);
    } else if (c.isInstance(BoldText.class)) {    
        result = boldtext((BoldText) o);
    } else if (c.isInstance(Text.class)) {
        result = text((Text) o);
    } else {
        result = o.toString();
    }
    
    return result;
}

String chapter(Chapter c) {
	return "\\" + c.subs() + "section*{" + translate(c.title()) + "}" + def(c);
}

String document(Document d) {
    StringBuilder tex = new StringBuilder("\\documentclass{article}\n");
	for (int i = 0; i < d.packages().size(); i = i + 1) {
		tex.append("\\usepackage{").append(d.packages().get(i)).append("}\n");
	}
	
	tex.append("\\setlength{\\parindent}{0em}\n")
         .append("\\setlength{\\parskip}{1em}\n")
         .append("\\begin{document}\n")
         .append(def(d))
         .append("\n\\end{document}\n");

	return tex.toString();
}

String enumerate(Enumerate e) {
    return def(e);
}

String enumerateitem(EnumerateItem e) {
    return enumerateitem(e, null);
}

String enumerateitem(EnumerateItem e, String option) {
    StringBuilder item = new StringBuilder("\\item");
	if ((option != null) && (option.length() > 0)) {
		item.append("[").append(option).append("]");
	} else {
		item.append(" ");
	}
    item.append(translate(e.text()));
	if (e.contentSize() > 0) {
		item.append("\n").append(def(e));
	}
	
	return item.toString();
}

String image(Image i) {
    	StringBuilder result = new StringBuilder("\\begin{figure}[ht]\n\\centering\n\\includegraphics[width=\\linewidth]{").append(translate(i.name()));
	if (i.name().endsWith(Image.PNG)) {
		result.append("}\n");
	} else {
		result.append(Image.PNG).append("}\n");
	}
    if (i.caption() != null) {
		result.append("\\caption{").append(translate(i.caption())).append("}\n");
	}
	
	result.append("\\end{figure}\n");
	
	return result.toString();
}

String itemize(Itemize i) {
    return def(i);
}

String itemizeitem(ItemizeItem i) {
	StringBuilder result = new StringBuilder("\\item ").append(translate(i.text()));
	if (i.contentSize() > 0) {
		result.append("\n").append(def(i));
	}
	
	return result.toString();
}

String paragraph(Paragraph p) {
	return "\\par " + translate(p.text());
}

String boldtext(BoldText t) {
    return getPre(t) + "\\textbf{" + t.text() + "}";
}

String text(Text t) {
    return getPre(t) + t.realText();
}

private String getPre(Text t) {
    if (t.appendee() != null)  {
        return translate(t.appendee());
    } else {
        return "";
    }
}


private String def(Content c) {
    StringBuilder tex = new StringBuilder();
    for (int i = 0; i < c.contentSize(); i = i + 1) {
        tex.append("\n").append(translate(c.content().get(i)));
    }

    return tex.toString();
}